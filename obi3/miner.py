import logging
import time

from inotify import constants as ic
from inotify.adapters import InotifyTree

from obi3 import cnf

log = logging.getLogger(__name__)

MASK = (ic.IN_MODIFY | ic.IN_CLOSE_WRITE | ic.IN_MOVED_FROM | ic.IN_MOVED_TO
        | ic.IN_CREATE | ic.IN_DELETE | ic.IN_DELETE_SELF | ic.IN_MOVE_SELF)


def mine():
    build_config(gather_fragments())


def eventloop():
    treeWatcher = InotifyTree(str(cnf.fragmentsPath).encode(), mask=MASK)
    backoffTime = 0.1
    lastChange = time.time()
    lastFilename = None
    for event in treeWatcher.event_gen():
        if event:
            (header, typeNames, watchPath, filename) = event
            filename = filename.decode()
            log.debug(
                "WD=(%d) MASK=(%d) COOKIE=(%d) LEN=(%d) MASK->NAMES=%s "
                "WATCH-PATH=[%s] FILENAME=[%s]",
                header.wd, header.mask, header.cookie, header.len,
                typeNames, watchPath.decode('utf-8'), filename)
            if filename.endswith(cnf.suffix):
                if filename == lastFilename:
                    if time.time() - lastChange < backoffTime:
                        log.info("ignore %s changed too quick", filename)
                        continue
                log.info("%s changed -> mining", filename)
                lastFilename = filename
                lastChange = time.time()
                mine()


def gather_fragments():
    """:returns: list of pathlib.Path"""
    return [path for path in sorted([d for d in cnf.fragmentsPath.iterdir()])
            if path.suffix == cnf.suffix]


def build_config(fragments):
    out = ["# DO NOT EDIT - GENERATED BY MINER at %s" % time.asctime()]
    out.extend(["# %s\n\n%s" % (f, f.read_text()) for f in fragments])
    cnf.CONFIG_PATH.write_text('\n\n'.join(out))


if __name__ == '__main__':
    cnf.configure_logging()
    eventloop()
    print("done")
